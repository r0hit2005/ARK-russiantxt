// Generated by gencpp from file russian_txt/results.msg
// DO NOT EDIT!


#ifndef RUSSIAN_TXT_MESSAGE_RESULTS_H
#define RUSSIAN_TXT_MESSAGE_RESULTS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace russian_txt
{
template <class ContainerAllocator>
struct results_
{
  typedef results_<ContainerAllocator> Type;

  results_()
    : text()
    , cx(0)
    , cy(0)  {
    }
  results_(const ContainerAllocator& _alloc)
    : text(_alloc)
    , cx(0)
    , cy(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _text_type;
  _text_type text;

   typedef uint8_t _cx_type;
  _cx_type cx;

   typedef uint8_t _cy_type;
  _cy_type cy;





  typedef boost::shared_ptr< ::russian_txt::results_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::russian_txt::results_<ContainerAllocator> const> ConstPtr;

}; // struct results_

typedef ::russian_txt::results_<std::allocator<void> > results;

typedef boost::shared_ptr< ::russian_txt::results > resultsPtr;
typedef boost::shared_ptr< ::russian_txt::results const> resultsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::russian_txt::results_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::russian_txt::results_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::russian_txt::results_<ContainerAllocator1> & lhs, const ::russian_txt::results_<ContainerAllocator2> & rhs)
{
  return lhs.text == rhs.text &&
    lhs.cx == rhs.cx &&
    lhs.cy == rhs.cy;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::russian_txt::results_<ContainerAllocator1> & lhs, const ::russian_txt::results_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace russian_txt

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::russian_txt::results_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::russian_txt::results_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::russian_txt::results_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::russian_txt::results_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::russian_txt::results_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::russian_txt::results_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::russian_txt::results_<ContainerAllocator> >
{
  static const char* value()
  {
    return "83316a74c480fb416a8b072597d2f808";
  }

  static const char* value(const ::russian_txt::results_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x83316a74c480fb41ULL;
  static const uint64_t static_value2 = 0x6a8b072597d2f808ULL;
};

template<class ContainerAllocator>
struct DataType< ::russian_txt::results_<ContainerAllocator> >
{
  static const char* value()
  {
    return "russian_txt/results";
  }

  static const char* value(const ::russian_txt::results_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::russian_txt::results_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string text\n"
"uint8 cx\n"
"uint8 cy\n"
;
  }

  static const char* value(const ::russian_txt::results_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::russian_txt::results_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.text);
      stream.next(m.cx);
      stream.next(m.cy);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct results_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::russian_txt::results_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::russian_txt::results_<ContainerAllocator>& v)
  {
    s << indent << "text: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.text);
    s << indent << "cx: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cx);
    s << indent << "cy: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cy);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RUSSIAN_TXT_MESSAGE_RESULTS_H
